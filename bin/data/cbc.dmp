
/lib/modules/2.6.32.8/kernel/crypto/cbc.ko:     file format elf32-i386


Disassembly of section .text:

00000000 <crypto_cbc_setkey>:
   0:	57                   	push   %edi
   1:	56                   	push   %esi
   2:	89 c6                	mov    %eax,%esi
   4:	53                   	push   %ebx
   5:	8b 58 30             	mov    0x30(%eax),%ebx
   8:	8b 3b                	mov    (%ebx),%edi
   a:	81 e7 ff 00 f0 ff    	and    $0xfff000ff,%edi
  10:	89 3b                	mov    %edi,(%ebx)
  12:	8b 00                	mov    (%eax),%eax
  14:	25 00 ff 0f 00       	and    $0xfff00,%eax
  19:	09 f8                	or     %edi,%eax
  1b:	89 03                	mov    %eax,(%ebx)
  1d:	89 d8                	mov    %ebx,%eax
  1f:	ff 53 04             	call   *0x4(%ebx)
  22:	8b 13                	mov    (%ebx),%edx
  24:	5b                   	pop    %ebx
  25:	81 e2 00 00 f0 ff    	and    $0xfff00000,%edx
  2b:	09 16                	or     %edx,(%esi)
  2d:	5e                   	pop    %esi
  2e:	5f                   	pop    %edi
  2f:	c3                   	ret    

00000030 <crypto_cbc_free>:
  30:	53                   	push   %ebx
  31:	89 c3                	mov    %eax,%ebx
  33:	8d 80 f0 00 00 00    	lea    0xf0(%eax),%eax
  39:	e8 fc ff ff ff       	call   3a <crypto_cbc_free+0xa>
			3a: R_386_PC32	crypto_drop_spawn
  3e:	89 d8                	mov    %ebx,%eax
  40:	5b                   	pop    %ebx
  41:	e9 fc ff ff ff       	jmp    42 <crypto_cbc_free+0x12>
			42: R_386_PC32	kfree

00000046 <crypto_cbc_alloc>:
  46:	56                   	push   %esi
  47:	ba 04 00 00 00       	mov    $0x4,%edx
  4c:	53                   	push   %ebx
  4d:	89 c3                	mov    %eax,%ebx
  4f:	e8 fc ff ff ff       	call   50 <crypto_cbc_alloc+0xa>
			50: R_386_PC32	crypto_check_attr_type
  54:	85 c0                	test   %eax,%eax
  56:	89 c6                	mov    %eax,%esi
  58:	0f 85 e3 00 00 00    	jne    141 <crypto_cbc_alloc+0xfb>
  5e:	8b 43 04             	mov    0x4(%ebx),%eax
  61:	31 d2                	xor    %edx,%edx
  63:	b9 01 00 00 00       	mov    $0x1,%ecx
  68:	6a 0f                	push   $0xf
  6a:	e8 fc ff ff ff       	call   6b <crypto_cbc_alloc+0x25>
			6b: R_386_PC32	crypto_attr_alg2
  6f:	89 c3                	mov    %eax,%ebx
  71:	81 fb 00 f0 ff ff    	cmp    $0xfffff000,%ebx
  77:	89 de                	mov    %ebx,%esi
  79:	58                   	pop    %eax
  7a:	0f 87 c1 00 00 00    	ja     141 <crypto_cbc_alloc+0xfb>
  80:	8b 43 14             	mov    0x14(%ebx),%eax
  83:	31 d2                	xor    %edx,%edx
  85:	85 c0                	test   %eax,%eax
  87:	74 0b                	je     94 <crypto_cbc_alloc+0x4e>
  89:	8d 50 ff             	lea    -0x1(%eax),%edx
  8c:	85 c2                	test   %eax,%edx
  8e:	0f 94 c2             	sete   %dl
  91:	0f b6 d2             	movzbl %dl,%edx
  94:	85 d2                	test   %edx,%edx
  96:	be ea ff ff ff       	mov    $0xffffffea,%esi
  9b:	0f 84 99 00 00 00    	je     13a <crypto_cbc_alloc+0xf4>
  a1:	89 da                	mov    %ebx,%edx
  a3:	b8 00 00 00 00       	mov    $0x0,%eax
			a4: R_386_32	.rodata.str1.1
  a8:	e8 fc ff ff ff       	call   a9 <crypto_cbc_alloc+0x63>
			a9: R_386_PC32	crypto_alloc_instance
  ad:	3d 00 f0 ff ff       	cmp    $0xfffff000,%eax
  b2:	89 c6                	mov    %eax,%esi
  b4:	0f 87 80 00 00 00    	ja     13a <crypto_cbc_alloc+0xf4>
  ba:	c7 40 10 04 00 00 00 	movl   $0x4,0x10(%eax)
  c1:	8b 43 20             	mov    0x20(%ebx),%eax
  c4:	89 46 20             	mov    %eax,0x20(%esi)
  c7:	8b 43 14             	mov    0x14(%ebx),%eax
  ca:	89 46 14             	mov    %eax,0x14(%esi)
  cd:	8b 43 1c             	mov    0x1c(%ebx),%eax
  d0:	c7 86 a8 00 00 00 00 	movl   $0x0,0xa8(%esi)
  d7:	00 00 00 
			d6: R_386_32	crypto_blkcipher_type
  da:	83 c8 03             	or     $0x3,%eax
  dd:	89 46 1c             	mov    %eax,0x1c(%esi)
  e0:	8b 43 14             	mov    0x14(%ebx),%eax
  e3:	89 86 c4 00 00 00    	mov    %eax,0xc4(%esi)
  e9:	8b 83 ac 00 00 00    	mov    0xac(%ebx),%eax
  ef:	89 86 bc 00 00 00    	mov    %eax,0xbc(%esi)
  f5:	8b 83 b0 00 00 00    	mov    0xb0(%ebx),%eax
  fb:	c7 46 18 04 00 00 00 	movl   $0x4,0x18(%esi)
 102:	c7 86 d0 00 00 00 6e 	movl   $0x46e,0xd0(%esi)
 109:	04 00 00 
			108: R_386_32	.text
 10c:	c7 86 d4 00 00 00 64 	movl   $0x464,0xd4(%esi)
 113:	04 00 00 
			112: R_386_32	.text
 116:	89 86 c0 00 00 00    	mov    %eax,0xc0(%esi)
 11c:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
 123:	00 00 00 
			122: R_386_32	.text
 126:	c7 86 b0 00 00 00 46 	movl   $0x146,0xb0(%esi)
 12d:	01 00 00 
			12c: R_386_32	.text
 130:	c7 86 b4 00 00 00 7b 	movl   $0x37b,0xb4(%esi)
 137:	03 00 00 
			136: R_386_32	.text
 13a:	89 d8                	mov    %ebx,%eax
 13c:	e8 fc ff ff ff       	call   13d <crypto_cbc_alloc+0xf7>
			13d: R_386_PC32	crypto_mod_put
 141:	89 f0                	mov    %esi,%eax
 143:	5b                   	pop    %ebx
 144:	5e                   	pop    %esi
 145:	c3                   	ret    

00000146 <crypto_cbc_encrypt>:
 146:	55                   	push   %ebp
 147:	57                   	push   %edi
 148:	56                   	push   %esi
 149:	53                   	push   %ebx
 14a:	83 ec 5c             	sub    $0x5c,%esp
 14d:	89 44 24 10          	mov    %eax,0x10(%esp)
 151:	8b 00                	mov    (%eax),%eax
 153:	8d 5c 24 20          	lea    0x20(%esp),%ebx
 157:	8b 40 30             	mov    0x30(%eax),%eax
 15a:	89 54 24 3c          	mov    %edx,0x3c(%esp)
 15e:	89 da                	mov    %ebx,%edx
 160:	89 4c 24 30          	mov    %ecx,0x30(%esp)
 164:	89 44 24 0c          	mov    %eax,0xc(%esp)
 168:	8b 44 24 70          	mov    0x70(%esp),%eax
 16c:	89 44 24 44          	mov    %eax,0x44(%esp)
 170:	8b 44 24 10          	mov    0x10(%esp),%eax
 174:	e8 fc ff ff ff       	call   175 <crypto_cbc_encrypt+0x2f>
			175: R_386_PC32	blkcipher_walk_virt
 179:	e9 f7 00 00 00       	jmp    275 <crypto_cbc_encrypt+0x12f>
 17e:	8b 44 24 2c          	mov    0x2c(%esp),%eax
 182:	8b 6c 24 24          	mov    0x24(%esp),%ebp
 186:	8b 54 24 0c          	mov    0xc(%esp),%edx
 18a:	8b 5c 24 50          	mov    0x50(%esp),%ebx
 18e:	89 44 24 04          	mov    %eax,0x4(%esp)
 192:	39 c5                	cmp    %eax,%ebp
 194:	8b 42 2c             	mov    0x2c(%edx),%eax
 197:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 19b:	75 59                	jne    1f6 <crypto_cbc_encrypt+0xb0>
 19d:	8b 58 14             	mov    0x14(%eax),%ebx
 1a0:	8b 54 24 08          	mov    0x8(%esp),%edx
 1a4:	8b b8 b8 00 00 00    	mov    0xb8(%eax),%edi
 1aa:	89 de                	mov    %ebx,%esi
 1ac:	29 d9                	sub    %ebx,%ecx
 1ae:	f7 de                	neg    %esi
 1b0:	89 0c 24             	mov    %ecx,(%esp)
 1b3:	89 d9                	mov    %ebx,%ecx
 1b5:	89 e8                	mov    %ebp,%eax
 1b7:	e8 fc ff ff ff       	call   1b8 <crypto_cbc_encrypt+0x72>
			1b8: R_386_PC32	crypto_xor
 1bc:	89 e9                	mov    %ebp,%ecx
 1be:	89 ea                	mov    %ebp,%edx
 1c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
 1c4:	ff d7                	call   *%edi
 1c6:	8d 44 1d 00          	lea    0x0(%ebp,%ebx,1),%eax
 1ca:	8b 14 24             	mov    (%esp),%edx
 1cd:	01 f2                	add    %esi,%edx
 1cf:	89 d1                	mov    %edx,%ecx
 1d1:	01 d9                	add    %ebx,%ecx
 1d3:	72 09                	jb     1de <crypto_cbc_encrypt+0x98>
 1d5:	89 14 24             	mov    %edx,(%esp)
 1d8:	89 ea                	mov    %ebp,%edx
 1da:	89 c5                	mov    %eax,%ebp
 1dc:	eb d5                	jmp    1b3 <crypto_cbc_encrypt+0x6d>
 1de:	89 d9                	mov    %ebx,%ecx
 1e0:	8b 7c 24 50          	mov    0x50(%esp),%edi
 1e4:	89 ee                	mov    %ebp,%esi
 1e6:	c1 e9 02             	shr    $0x2,%ecx
 1e9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 1eb:	89 d9                	mov    %ebx,%ecx
 1ed:	83 e1 03             	and    $0x3,%ecx
 1f0:	74 02                	je     1f4 <crypto_cbc_encrypt+0xae>
 1f2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 1f4:	eb 6f                	jmp    265 <crypto_cbc_encrypt+0x11f>
 1f6:	8b 98 b8 00 00 00    	mov    0xb8(%eax),%ebx
 1fc:	89 5c 24 18          	mov    %ebx,0x18(%esp)
 200:	8b 58 14             	mov    0x14(%eax),%ebx
 203:	89 d8                	mov    %ebx,%eax
 205:	89 da                	mov    %ebx,%edx
 207:	c1 e8 02             	shr    $0x2,%eax
 20a:	f7 da                	neg    %edx
 20c:	29 d9                	sub    %ebx,%ecx
 20e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 212:	89 54 24 14          	mov    %edx,0x14(%esp)
 216:	89 0c 24             	mov    %ecx,(%esp)
 219:	8b 44 24 08          	mov    0x8(%esp),%eax
 21d:	89 d9                	mov    %ebx,%ecx
 21f:	89 ea                	mov    %ebp,%edx
 221:	e8 fc ff ff ff       	call   222 <crypto_cbc_encrypt+0xdc>
			222: R_386_PC32	crypto_xor
 226:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 22a:	8b 54 24 04          	mov    0x4(%esp),%edx
 22e:	8b 44 24 0c          	mov    0xc(%esp),%eax
 232:	ff 54 24 18          	call   *0x18(%esp)
 236:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 23a:	8b 7c 24 08          	mov    0x8(%esp),%edi
 23e:	8b 74 24 04          	mov    0x4(%esp),%esi
 242:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 244:	89 d9                	mov    %ebx,%ecx
 246:	83 e1 03             	and    $0x3,%ecx
 249:	74 02                	je     24d <crypto_cbc_encrypt+0x107>
 24b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 24d:	8b 04 24             	mov    (%esp),%eax
 250:	03 44 24 14          	add    0x14(%esp),%eax
 254:	89 c1                	mov    %eax,%ecx
 256:	01 d9                	add    %ebx,%ecx
 258:	72 0b                	jb     265 <crypto_cbc_encrypt+0x11f>
 25a:	01 dd                	add    %ebx,%ebp
 25c:	01 5c 24 04          	add    %ebx,0x4(%esp)
 260:	89 04 24             	mov    %eax,(%esp)
 263:	eb b4                	jmp    219 <crypto_cbc_encrypt+0xd3>
 265:	8b 0c 24             	mov    (%esp),%ecx
 268:	8d 54 24 20          	lea    0x20(%esp),%edx
 26c:	8b 44 24 10          	mov    0x10(%esp),%eax
 270:	e8 fc ff ff ff       	call   271 <crypto_cbc_encrypt+0x12b>
			271: R_386_PC32	blkcipher_walk_done
 275:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 279:	85 c9                	test   %ecx,%ecx
 27b:	0f 85 fd fe ff ff    	jne    17e <crypto_cbc_encrypt+0x38>
 281:	83 c4 5c             	add    $0x5c,%esp
 284:	5b                   	pop    %ebx
 285:	5e                   	pop    %esi
 286:	5f                   	pop    %edi
 287:	5d                   	pop    %ebp
 288:	c3                   	ret    

00000289 <crypto_cbc_decrypt_inplace>:
 289:	55                   	push   %ebp
 28a:	89 e5                	mov    %esp,%ebp
 28c:	57                   	push   %edi
 28d:	56                   	push   %esi
 28e:	53                   	push   %ebx
 28f:	83 ec 24             	sub    $0x24,%esp
 292:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 298:	89 45 f0             	mov    %eax,-0x10(%ebp)
 29b:	31 c0                	xor    %eax,%eax
 29d:	89 55 e8             	mov    %edx,-0x18(%ebp)
 2a0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
 2a3:	8b 41 2c             	mov    0x2c(%ecx),%eax
 2a6:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
 2ac:	89 55 d0             	mov    %edx,-0x30(%ebp)
 2af:	8b 55 e8             	mov    -0x18(%ebp),%edx
 2b2:	8b 40 14             	mov    0x14(%eax),%eax
 2b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 2b8:	8b 42 18             	mov    0x18(%edx),%eax
 2bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
 2be:	83 c2 12             	add    $0x12,%edx
 2c1:	83 e2 fc             	and    $0xfffffffc,%edx
 2c4:	29 d4                	sub    %edx,%esp
 2c6:	8d 54 24 0f          	lea    0xf(%esp),%edx
 2ca:	83 e2 f0             	and    $0xfffffff0,%edx
 2cd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 2d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
 2d3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
 2d6:	f7 da                	neg    %edx
 2d8:	89 55 dc             	mov    %edx,-0x24(%ebp)
 2db:	89 d3                	mov    %edx,%ebx
 2dd:	8b 55 e8             	mov    -0x18(%ebp),%edx
 2e0:	21 c3                	and    %eax,%ebx
 2e2:	2b 5d ec             	sub    -0x14(%ebp),%ebx
 2e5:	03 5a 04             	add    0x4(%edx),%ebx
 2e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
 2eb:	89 de                	mov    %ebx,%esi
 2ed:	c1 ea 02             	shr    $0x2,%edx
 2f0:	89 55 d8             	mov    %edx,-0x28(%ebp)
 2f3:	89 d1                	mov    %edx,%ecx
 2f5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 2f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
 2fa:	83 e1 03             	and    $0x3,%ecx
 2fd:	74 02                	je     301 <crypto_cbc_decrypt_inplace+0x78>
 2ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 301:	2b 45 ec             	sub    -0x14(%ebp),%eax
 304:	89 45 e0             	mov    %eax,-0x20(%ebp)
 307:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 30a:	89 d9                	mov    %ebx,%ecx
 30c:	89 da                	mov    %ebx,%edx
 30e:	ff 55 d0             	call   *-0x30(%ebp)
 311:	8b 75 e0             	mov    -0x20(%ebp),%esi
 314:	8b 45 ec             	mov    -0x14(%ebp),%eax
 317:	03 75 dc             	add    -0x24(%ebp),%esi
 31a:	01 f0                	add    %esi,%eax
 31c:	72 19                	jb     337 <crypto_cbc_decrypt_inplace+0xae>
 31e:	8b 55 dc             	mov    -0x24(%ebp),%edx
 321:	89 d8                	mov    %ebx,%eax
 323:	8b 4d ec             	mov    -0x14(%ebp),%ecx
 326:	8d 3c 13             	lea    (%ebx,%edx,1),%edi
 329:	89 fa                	mov    %edi,%edx
 32b:	89 fb                	mov    %edi,%ebx
 32d:	e8 fc ff ff ff       	call   32e <crypto_cbc_decrypt_inplace+0xa5>
			32e: R_386_PC32	crypto_xor
 332:	89 75 e0             	mov    %esi,-0x20(%ebp)
 335:	eb d0                	jmp    307 <crypto_cbc_decrypt_inplace+0x7e>
 337:	8b 45 e8             	mov    -0x18(%ebp),%eax
 33a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
 33d:	8b 50 30             	mov    0x30(%eax),%edx
 340:	89 d8                	mov    %ebx,%eax
 342:	e8 fc ff ff ff       	call   343 <crypto_cbc_decrypt_inplace+0xba>
			343: R_386_PC32	crypto_xor
 347:	8b 55 e8             	mov    -0x18(%ebp),%edx
 34a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
 34d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
 350:	8b 7a 30             	mov    0x30(%edx),%edi
 353:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 355:	8b 4d ec             	mov    -0x14(%ebp),%ecx
 358:	83 e1 03             	and    $0x3,%ecx
 35b:	74 02                	je     35f <crypto_cbc_decrypt_inplace+0xd6>
 35d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 35f:	8b 55 f0             	mov    -0x10(%ebp),%edx
 362:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 369:	8b 45 e0             	mov    -0x20(%ebp),%eax
 36c:	74 05                	je     373 <crypto_cbc_decrypt_inplace+0xea>
 36e:	e8 fc ff ff ff       	call   36f <crypto_cbc_decrypt_inplace+0xe6>
			36f: R_386_PC32	__stack_chk_fail
 373:	8d 65 f4             	lea    -0xc(%ebp),%esp
 376:	5b                   	pop    %ebx
 377:	5e                   	pop    %esi
 378:	5f                   	pop    %edi
 379:	5d                   	pop    %ebp
 37a:	c3                   	ret    

0000037b <crypto_cbc_decrypt>:
 37b:	55                   	push   %ebp
 37c:	89 c5                	mov    %eax,%ebp
 37e:	57                   	push   %edi
 37f:	56                   	push   %esi
 380:	53                   	push   %ebx
 381:	83 ec 50             	sub    $0x50,%esp
 384:	8b 00                	mov    (%eax),%eax
 386:	8d 5c 24 14          	lea    0x14(%esp),%ebx
 38a:	8b 40 30             	mov    0x30(%eax),%eax
 38d:	89 54 24 30          	mov    %edx,0x30(%esp)
 391:	89 da                	mov    %ebx,%edx
 393:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 397:	89 44 24 04          	mov    %eax,0x4(%esp)
 39b:	8b 44 24 64          	mov    0x64(%esp),%eax
 39f:	89 44 24 38          	mov    %eax,0x38(%esp)
 3a3:	89 e8                	mov    %ebp,%eax
 3a5:	e8 fc ff ff ff       	call   3a6 <crypto_cbc_decrypt+0x2b>
			3a6: R_386_PC32	blkcipher_walk_virt
 3aa:	e9 a1 00 00 00       	jmp    450 <crypto_cbc_decrypt+0xd5>
 3af:	8b 74 24 18          	mov    0x18(%esp),%esi
 3b3:	8b 7c 24 20          	mov    0x20(%esp),%edi
 3b7:	39 fe                	cmp    %edi,%esi
 3b9:	75 14                	jne    3cf <crypto_cbc_decrypt+0x54>
 3bb:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 3bf:	8d 54 24 14          	lea    0x14(%esp),%edx
 3c3:	89 e8                	mov    %ebp,%eax
 3c5:	e8 bf fe ff ff       	call   289 <crypto_cbc_decrypt_inplace>
 3ca:	89 04 24             	mov    %eax,(%esp)
 3cd:	eb 73                	jmp    442 <crypto_cbc_decrypt+0xc7>
 3cf:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 3d3:	8b 41 2c             	mov    0x2c(%ecx),%eax
 3d6:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
 3dc:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 3e0:	8b 58 14             	mov    0x14(%eax),%ebx
 3e3:	8b 44 24 44          	mov    0x44(%esp),%eax
 3e7:	89 d9                	mov    %ebx,%ecx
 3e9:	29 da                	sub    %ebx,%edx
 3eb:	f7 d9                	neg    %ecx
 3ed:	89 44 24 08          	mov    %eax,0x8(%esp)
 3f1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 3f5:	89 14 24             	mov    %edx,(%esp)
 3f8:	8b 44 24 04          	mov    0x4(%esp),%eax
 3fc:	89 fa                	mov    %edi,%edx
 3fe:	89 f1                	mov    %esi,%ecx
 400:	ff 54 24 10          	call   *0x10(%esp)
 404:	89 f8                	mov    %edi,%eax
 406:	89 d9                	mov    %ebx,%ecx
 408:	01 df                	add    %ebx,%edi
 40a:	8b 54 24 08          	mov    0x8(%esp),%edx
 40e:	e8 fc ff ff ff       	call   40f <crypto_cbc_decrypt+0x94>
			40f: R_386_PC32	crypto_xor
 413:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
 416:	8b 14 24             	mov    (%esp),%edx
 419:	03 54 24 0c          	add    0xc(%esp),%edx
 41d:	89 d1                	mov    %edx,%ecx
 41f:	01 d9                	add    %ebx,%ecx
 421:	72 0b                	jb     42e <crypto_cbc_decrypt+0xb3>
 423:	89 74 24 08          	mov    %esi,0x8(%esp)
 427:	89 c6                	mov    %eax,%esi
 429:	89 14 24             	mov    %edx,(%esp)
 42c:	eb ca                	jmp    3f8 <crypto_cbc_decrypt+0x7d>
 42e:	89 d9                	mov    %ebx,%ecx
 430:	8b 7c 24 44          	mov    0x44(%esp),%edi
 434:	c1 e9 02             	shr    $0x2,%ecx
 437:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 439:	89 d9                	mov    %ebx,%ecx
 43b:	83 e1 03             	and    $0x3,%ecx
 43e:	74 02                	je     442 <crypto_cbc_decrypt+0xc7>
 440:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 442:	8b 0c 24             	mov    (%esp),%ecx
 445:	8d 54 24 14          	lea    0x14(%esp),%edx
 449:	89 e8                	mov    %ebp,%eax
 44b:	e8 fc ff ff ff       	call   44c <crypto_cbc_decrypt+0xd1>
			44c: R_386_PC32	blkcipher_walk_done
 450:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 454:	85 d2                	test   %edx,%edx
 456:	0f 85 53 ff ff ff    	jne    3af <crypto_cbc_decrypt+0x34>
 45c:	83 c4 50             	add    $0x50,%esp
 45f:	5b                   	pop    %ebx
 460:	5e                   	pop    %esi
 461:	5f                   	pop    %edi
 462:	5d                   	pop    %ebp
 463:	c3                   	ret    

00000464 <crypto_cbc_exit_tfm>:
 464:	8b 40 30             	mov    0x30(%eax),%eax
 467:	89 c2                	mov    %eax,%edx
 469:	e9 fc ff ff ff       	jmp    46a <crypto_cbc_exit_tfm+0x6>
			46a: R_386_PC32	crypto_destroy_tfm

0000046e <crypto_cbc_init_tfm>:
 46e:	53                   	push   %ebx
 46f:	89 c3                	mov    %eax,%ebx
 471:	8b 40 2c             	mov    0x2c(%eax),%eax
 474:	ba 01 00 00 00       	mov    $0x1,%edx
 479:	b9 0f 00 00 00       	mov    $0xf,%ecx
 47e:	05 f0 00 00 00       	add    $0xf0,%eax
 483:	e8 fc ff ff ff       	call   484 <crypto_cbc_init_tfm+0x16>
			484: R_386_PC32	crypto_spawn_tfm
 488:	3d 00 f0 ff ff       	cmp    $0xfffff000,%eax
 48d:	89 c2                	mov    %eax,%edx
 48f:	77 05                	ja     496 <crypto_cbc_init_tfm+0x28>
 491:	89 43 30             	mov    %eax,0x30(%ebx)
 494:	31 d2                	xor    %edx,%edx
 496:	89 d0                	mov    %edx,%eax
 498:	5b                   	pop    %ebx
 499:	c3                   	ret    
	...

Disassembly of section .exit.text:

00000000 <cleanup_module>:
   0:	b8 00 00 00 00       	mov    $0x0,%eax
			1: R_386_32	.data
   5:	e9 fc ff ff ff       	jmp    6 <cleanup_module+0x6>
			6: R_386_PC32	crypto_unregister_template

Disassembly of section .init.text:

00000000 <init_module>:
   0:	b8 00 00 00 00       	mov    $0x0,%eax
			1: R_386_32	.data
   5:	e9 fc ff ff ff       	jmp    6 <init_module+0x6>
			6: R_386_PC32	crypto_register_template
